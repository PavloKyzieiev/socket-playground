{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","storageUrl","localStorage","getItem","authToken","qs","parse","window","location","search","user","authorized","loading","socket","consoleData","instruments","activeInstrument","handleInputChange","event","key","value","target","setItem","_this","setState","Object","defineProperty","handleConnectButtonClick","_this$state","close","WebSocket","e","message","initWebSocket","_this$state2","onopen","prevState","objectSpread","concat","toConsumableArray","send","JSON","stringify","name","onclose","reason","wasClean","order","onmessage","_JSON$parse","data","status","onerror","error","subscribe","brokerId","_this$state3","prevProps","this","_this2","_this$state4","button","react_default","a","createElement","type","onClick","className","onChange","length","map","el","index","id","React","Component","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.06cd3e92.chunk.js","sourcesContent":["import React from \"react\";\nimport qs from 'query-string';\n\nclass App extends React.Component {\n  state = {\n    storageUrl: localStorage.getItem(\"storageUrl\") || \"\",\n    authToken: qs.parse(window.location.search).user || localStorage.getItem(\"authToken\") || \"\",\n    authorized: false,\n    loading: false,\n    socket: null,\n    consoleData: [],\n    instruments: [],\n    activeInstrument: null\n  };\n\n  handleInputChange = (event, key) => {\n    const { value } = event.target;\n    localStorage.setItem(key, value);\n    this.setState({ [key]: value });\n  };\n\n  handleConnectButtonClick = () => {\n    const { authorized, storageUrl } = this.state;\n    let { socket } = this.state;\n    if (!authorized) {\n      try {\n        socket = new WebSocket(storageUrl);\n      } catch (e) {\n        return this.setState({ consoleData: [e.message] });\n      }\n\n      this.setState({ socket, loading: true });\n    } else if (socket && authorized) {\n      this.setState({ instruments: [], activeInstrument: null });\n      socket.close();\n    }\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    if (!prevState.socket && this.state.socket) {\n      this.initWebSocket();\n    }\n  }\n\n  initWebSocket = () => {\n    let { socket, authToken } = this.state;\n\n    socket.onopen = () => {\n      this.setState(prevState => ({\n        ...prevState,\n        consoleData: [...prevState.consoleData, \"Соединение установлено.\"]\n      }));\n\n      socket.send(JSON.stringify({ name: \"auth\", authToken }));\n    };\n\n    socket.onclose = event => {\n      let reason = \"\";\n\n      if (event.wasClean) {\n        reason = \"Соединение закрыто\";\n      } else {\n        reason = \"Обрыв соединения\";\n      }\n\n      this.setState(prevState => ({\n        ...prevState,\n        consoleData: [...prevState.consoleData, reason],\n        authorized: false,\n        socket: null,\n        loading: false,\n        order: null\n      }));\n    };\n\n    socket.onmessage = message => {\n      const { name, status, instruments, order } = JSON.parse(message.data);\n\n      let { authorized } = this.state;\n\n      switch (name) {\n        case \"authRequest\": {\n          if (status === \"OK\") {\n            authorized = true;\n            socket.send(JSON.stringify({ name: \"instruments\" }));\n          } else {\n            authorized = false;\n          }\n          break;\n        }\n        case \"instruments\": {\n          if (status === \"OK\") {\n            this.setState(prevState => ({ ...prevState, instruments }));\n          }\n          break;\n        }\n        case \"order\": {\n          if (status === \"OK\") {\n            this.setState(prevState => ({ ...prevState, order }));\n          }\n          break;\n        }\n\n        default:\n          break;\n      }\n\n      if (!authorized) socket = null;\n\n      this.setState(prevState => ({\n        ...prevState,\n        consoleData: [...prevState.consoleData, message.data],\n        authorized,\n        loading: false,\n        socket\n      }));\n    };\n\n    socket.onerror = error => {\n      this.setState(prevState => ({\n        ...prevState,\n        consoleData: [...prevState.consoleData, \"Ошибка \" + error.message],\n        authorized: false,\n        socket: null,\n        loading: false\n      }));\n    };\n  };\n\n  subscribe = brokerId => {\n    const { socket, activeInstrument } = this.state;\n    if (activeInstrument !== brokerId) {\n      socket.send(JSON.stringify({ name: \"subscribe\", brokerId }));\n      this.setState({ activeInstrument: brokerId });\n    }\n  };\n\n  render() {\n    var {\n      authorized,\n      consoleData,\n      loading,\n      instruments,\n      activeInstrument\n    } = this.state;\n    const button = loading ? (\n      <span>Loading</span>\n    ) : (\n      <button type=\"button\" onClick={this.handleConnectButtonClick}>\n        {authorized ? \"Disconnect\" : \"Connect\"}\n      </button>\n    );\n    return (\n      <div>\n        <div className=\"form-group\">\n          <label>Ендпоинт (ws[s]://...)</label>\n          <input\n            value={this.state.storageUrl}\n            onChange={e => this.handleInputChange(e, \"storageUrl\")}\n          />\n        </div>\n\n        <div className=\"form-group\">\n          <label>Токен</label>\n          <input\n            value={this.state.authToken}\n            onChange={e => this.handleInputChange(e, \"authToken\")}\n          />\n        </div>\n        {button}\n\n        {instruments.length ? (\n          <div className=\"instruments\">\n            {instruments.map((el, index) => (\n              <button\n                key={index}\n                className={activeInstrument === el.id ? \"active\" : \"\"}\n                onClick={() => this.subscribe(el.id)}\n              >\n                {el.name}\n              </button>\n            ))}\n          </div>\n        ) : null}\n\n        {consoleData.length ? (\n          <div className=\"console-wrap\">\n            <button onClick={() => this.setState({ consoleData: [] })}>\n              Clear\n            </button>\n            {consoleData.map((el, index) => (\n              <p className=\"console\" key={index}>\n                {el}\n              </p>\n            ))}\n          </div>\n        ) : null}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}