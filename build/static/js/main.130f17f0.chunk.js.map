{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","storageUrl","localStorage","getItem","userId","broker","account","authorized","loading","socket","consoleData","protoQuotes","instruments","consoleContainer","React","createRef","markets","selectedInstruments","handleInputChange","event","key","value","target","setItem","_this","setState","Object","defineProperty","handleConnectButtonClick","_this$state","activeInstrument","close","WebSocket","split","binaryType","e","message","initWebSocket","onopen","prevState","objectSpread","concat","toConsumableArray","request","JSON","stringify","user","onclose","reason","wasClean","order","onmessage","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","data","_this$state2","currentMarket","bytearray","type","wrap","_context","prev","next","Uint8Array","decode","instrumentId","parse","t0","abrupt","stop","this","_x","apply","arguments","onerror","error","body","send","checkInstrument","_ref2","sym","_this$state3","marketsObj","syms","keys","forEach","el","push","sub","rec","brk","acc","getInstruments","_this$state4","clearConsole","console","time","prevProps","timeEnd","current","scrollTop","scrollHeight","_this2","protobuf","load","then","root","lookupType","_this3","_this$state5","button","react_default","createElement","onClick","className","onChange","map","i","bid","ask","length","ref","index","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.130f17f0.chunk.js","sourcesContent":["import React from \"react\";\n\nimport protobuf from \"protobufjs\";\n\nclass App extends React.Component {\n  state = {\n    storageUrl: localStorage.getItem(\"storageUrl\") || \"\",\n    userId: localStorage.getItem(\"userId\") || \"\",\n    broker: localStorage.getItem(\"broker\") || \"\",\n    account: localStorage.getItem(\"account\") || \"\",\n    authorized: false,\n    loading: false,\n    socket: null,\n    consoleData: [],\n    protoQuotes: null,\n    instruments: [],\n    consoleContainer: React.createRef(),\n    markets: {},\n    selectedInstruments: []\n  };\n\n  handleInputChange = (event, key) => {\n    const { value } = event.target;\n    localStorage.setItem(key, value);\n    this.setState({ [key]: value });\n  };\n\n  handleConnectButtonClick = () => {\n    const { authorized, storageUrl, userId } = this.state;\n    let { socket } = this.state;\n    if (!authorized) {\n      try {\n        socket = new WebSocket(storageUrl.split(\"?\")[0] + \"?user=\" + userId);\n        socket.binaryType = \"arraybuffer\";\n      } catch (e) {\n        return this.setState({ consoleData: [e.message] });\n      }\n\n      this.setState({ socket, loading: true });\n    } else if (socket && authorized) {\n      this.setState({ instruments: [], activeInstrument: null });\n      socket.close();\n    }\n  };\n\n  componentWillUpdate() {\n    console.time()\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { consoleContainer } = this.state;\n    console.timeEnd()\n    if (consoleContainer.current) {\n      consoleContainer.current.scrollTop =\n        consoleContainer.current.scrollHeight;\n    }\n\n    if (!prevState.socket && this.state.socket) {\n      this.initWebSocket();\n    }\n  }\n\n  componentDidMount() {\n    protobuf.load(\"proto/awesome.proto\").then(root => {\n      var protoQuotes = root.lookupType(\"protobuf.quotes.Quote\");\n      this.setState(prevState => ({\n        ...prevState,\n        protoQuotes\n      }));\n    });\n  }\n\n  initWebSocket = () => {\n    let { socket } = this.state;\n\n    socket.onopen = () => {\n      this.setState(prevState => ({\n        ...prevState,\n        consoleData: [...prevState.consoleData, \"Соединение установлено.\"]\n      }));\n\n      this.request(JSON.stringify({ user: { userId: 666 } }));\n    };\n\n    socket.onclose = event => {\n      let reason = \"\";\n\n      if (event.wasClean) {\n        reason = \"Соединение закрыто\";\n      } else {\n        reason = \"Обрыв соединения\";\n      }\n\n      this.setState(prevState => ({\n        ...prevState,\n        consoleData: [...prevState.consoleData, reason],\n        authorized: false,\n        socket: null,\n        loading: false,\n        order: null\n      }));\n    };\n\n    socket.onmessage = async message => {\n      let data;\n\n      let {\n        authorized,\n        protoQuotes,\n        instruments,\n        currentMarket,\n        markets\n      } = this.state;\n\n      if (typeof message.data !== \"string\") {\n        var bytearray = new Uint8Array(message.data);\n        data = protoQuotes.decode(bytearray);\n        markets[data.instrumentId] = data;\n      } else {\n        data = JSON.parse(message.data);\n      }\n\n      const { type } = data;\n\n      switch (type) {\n        case 0: {\n          authorized = true;\n          break;\n        }\n        case 1: {\n          authorized = false;\n          break;\n        }\n        case 7: {\n          instruments = data.instruments;\n          break;\n        }\n        default: {\n          break;\n        }\n      }\n\n      if (!authorized) socket = null;\n\n      this.setState(prevState => ({\n        ...prevState,\n        consoleData: [JSON.stringify(data)],\n        authorized,\n        loading: false,\n        socket,\n        instruments,\n        currentMarket,\n        markets\n      }));\n    };\n\n    socket.onerror = error => {\n      this.setState(prevState => ({\n        ...prevState,\n        consoleData: [...prevState.consoleData, \"Ошибка \" + error.message],\n        authorized: false,\n        socket: null,\n        loading: false\n      }));\n    };\n  };\n\n  request = body => {\n    const { socket } = this.state;\n    socket.send(body);\n\n    this.setState(prevState => ({\n      ...prevState,\n      consoleData: [...prevState.consoleData, \"request ->   \" + body]\n    }));\n  };\n\n  checkInstrument = ({ sym }) => {\n    let { broker, account, markets } = this.state;\n\n    let marketsObj = { ...markets };\n    let syms = [];\n\n    if (marketsObj[sym]) {\n      delete marketsObj[sym];\n    } else {\n      marketsObj[sym] = {};\n    }\n\n    Object.keys(marketsObj).forEach(el => syms.push(el));\n\n    this.setState({ markets: marketsObj });\n\n    this.request(\n      JSON.stringify({\n        type: 1,\n        sub: [{ rec: { brk: broker, acc: account }, sym: syms }]\n      })\n    );\n  };\n\n  getInstruments = () => {\n    const { broker, account, socket } = this.state;\n    socket.send(\n      JSON.stringify({ type: 2, rec: { brk: broker, acc: account } })\n    );\n  };\n\n  clearConsole = () => {\n    this.setState({ consoleData: [] });\n  };\n\n  render() {\n    var { authorized, consoleData, loading, instruments, markets } = this.state;\n    const button = loading ? (\n      <span>Loading</span>\n    ) : (\n      <button type=\"button\" onClick={this.handleConnectButtonClick}>\n        {authorized ? \"Disconnect\" : \"Connect\"}\n      </button>\n    );\n    return (\n      <div>\n        <div className=\"control\">\n          <div>\n            <div className=\"form-group\">\n              <label>Ендпоинт (ws[s]://...)</label>\n              <input\n                value={this.state.storageUrl}\n                onChange={e => this.handleInputChange(e, \"storageUrl\")}\n              />\n            </div>\n            <div className=\"form-group\">\n              <label>Юзер</label>\n              <input\n                value={this.state.userId}\n                onChange={e => this.handleInputChange(e, \"userId\")}\n              />\n            </div>\n          </div>\n          {authorized && (\n            <div>\n              <div className=\"form-group\">\n                <label>Брокер</label>\n                <input\n                  value={this.state.broker}\n                  onChange={e => this.handleInputChange(e, \"broker\")}\n                />\n              </div>\n              <div className=\"form-group\">\n                <label>Аккаунт</label>\n                <input\n                  value={this.state.account}\n                  onChange={e => this.handleInputChange(e, \"account\")}\n                />\n              </div>\n            </div>\n          )}\n\n          {button}\n        </div>\n\n        {authorized && (\n          <div>\n            <button onClick={this.getInstruments}>Get Instruments</button>\n          </div>\n        )}\n\n        {instruments.map((el, i) => (\n          <button key={i} onClick={() => this.checkInstrument({ sym: el.sym })}>\n            {el.sym}\n          </button>\n        ))}\n\n        <hr />\n\n        <div className=\"body_wrap\">\n          <div className=\"trading_wrap\">\n            {Object.keys(markets).map(key => {\n              return (\n                <div key={key} className=\"trading\">\n                  <ul>\n                    <li>\n                      <b>instrument:</b> {markets[key].instrumentId}\n                    </li>\n                    <li>\n                      <b>bid:</b> {markets[key].bid}, <b>ask:</b> {markets[key].ask}\n                    </li>\n                    <li>\n                      <b>time:</b> {markets[key].time}\n                    </li>\n                  </ul>\n                </div>\n              );\n            })}\n          </div>\n          {consoleData.length ? (\n            <div className=\"console\">\n              <button onClick={this.clearConsole}>Clear</button>\n              <div className=\"console-wrap\" ref={this.state.consoleContainer}>\n                {consoleData.map((el, index) => (\n                  <p key={index}>{el}</p>\n                ))}\n              </div>\n            </div>\n          ) : null}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}