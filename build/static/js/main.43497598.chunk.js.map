{"version":3,"sources":["proto/awesome.js","App.js","serviceWorker.js","index.js"],"names":["Quote","exports","read","pbf","end","readFields","_readField","rec","instrumentId","bid","ask","time","tag","obj","Recipient","readVarint","pos","readString","write","writeMessage","writeStringField","writeVarintField","brokerId","accountId","defaultQuote","App","state","storageUrl","localStorage","getItem","userId","broker","account","authorized","loading","socket","protoQuotes","instruments","consoleContainer","React","createRef","markets","selectedInstruments","handleInputChange","event","key","value","target","setItem","_this","setState","Object","defineProperty","handleConnectButtonClick","_this$state","activeInstrument","close","WebSocket","split","binaryType","e","Error","initWebSocket","_this$state2","onopen","request","JSON","stringify","user","onclose","prevState","objectSpread","order","onmessage","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","message","data","_this$state3","currentMarket","_data","type","wrap","_context","prev","next","abrupt","console","timeEnd","Pbf","parse","t0","stop","this","_x","apply","arguments","onerror","error","body","send","handleInstrumentClick","_ref2","sym","_this$state4","marketsObj","syms","keys","forEach","el","push","sub","b","getInstruments","_this$state5","pingPong","prevProps","current","scrollTop","scrollHeight","_this2","_this$state6","button","react_default","createElement","onClick","className","onChange","map","i","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.43497598.chunk.js","sourcesContent":["// Quote ========================================\n\nvar Quote = exports.Quote = {};\n\nQuote.read = function (pbf, end) {\n    return pbf.readFields(Quote._readField, {rec: null, instrumentId: \"\", bid: \"\", ask: \"\", time: 0}, end);\n};\nQuote._readField = function (tag, obj, pbf) {\n    if (tag === 1) obj.rec = Recipient.read(pbf, pbf.readVarint() + pbf.pos);\n    else if (tag === 2) obj.instrumentId = pbf.readString();\n    else if (tag === 3) obj.bid = pbf.readString();\n    else if (tag === 4) obj.ask = pbf.readString();\n    else if (tag === 5) obj.time = pbf.readVarint(true);\n};\nQuote.write = function (obj, pbf) {\n    if (obj.rec) pbf.writeMessage(1, Recipient.write, obj.rec);\n    if (obj.instrumentId) pbf.writeStringField(2, obj.instrumentId);\n    if (obj.bid) pbf.writeStringField(3, obj.bid);\n    if (obj.ask) pbf.writeStringField(4, obj.ask);\n    if (obj.time) pbf.writeVarintField(5, obj.time);\n};\n\n// Recipient ========================================\n\nvar Recipient = exports.Recipient = {};\n\nRecipient.read = function (pbf, end) {\n    return pbf.readFields(Recipient._readField, {brokerId: 0, accountId: 0}, end);\n};\nRecipient._readField = function (tag, obj, pbf) {\n    if (tag === 1) obj.brokerId = pbf.readVarint(true);\n    else if (tag === 2) obj.accountId = pbf.readVarint(true);\n};\nRecipient.write = function (obj, pbf) {\n    if (obj.brokerId) pbf.writeVarintField(1, obj.brokerId);\n    if (obj.accountId) pbf.writeVarintField(2, obj.accountId);\n};\n","import React from \"react\";\nimport Pbf from \"pbf\";\nimport { Quote } from \"./proto/awesome\";\n// import protobuf from \"protobufjs\";\n\nconst defaultQuote = {\n  instrumentId: null,\n  bid: null,\n  ask: null,\n  time: null\n};\n\nclass App extends React.Component {\n  state = {\n    storageUrl: localStorage.getItem(\"storageUrl\") || \"\",\n    userId: localStorage.getItem(\"userId\") || \"\",\n    broker: localStorage.getItem(\"broker\") || \"\",\n    account: localStorage.getItem(\"account\") || \"\",\n    authorized: false,\n    loading: false,\n    socket: null,\n    protoQuotes: null,\n    instruments: [],\n    consoleContainer: React.createRef(),\n    markets: {},\n    selectedInstruments: []\n  };\n\n  handleInputChange = (event, key) => {\n    const { value } = event.target;\n    localStorage.setItem(key, value);\n    this.setState({ [key]: value });\n  };\n\n  handleConnectButtonClick = () => {\n    const { authorized, storageUrl, userId } = this.state;\n    let { socket } = this.state;\n    if (!authorized) {\n      try {\n        socket = new WebSocket(storageUrl.split(\"?\")[0] + \"?user=\" + userId);\n        socket.binaryType = \"arraybuffer\";\n      } catch (e) {\n        throw new Error(e);\n      }\n\n      this.setState({ socket, loading: true });\n    } else if (socket && authorized) {\n      this.setState({ instruments: [], activeInstrument: null });\n      socket.close();\n    }\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    const { consoleContainer } = this.state;\n\n    if (consoleContainer.current) {\n      consoleContainer.current.scrollTop =\n        consoleContainer.current.scrollHeight;\n    }\n\n    if (!prevState.socket && this.state.socket) {\n      this.initWebSocket();\n    }\n  }\n\n  initWebSocket = () => {\n    let { socket, userId } = this.state;\n\n    socket.onopen = () => {\n      this.request(JSON.stringify({ user: { userId } }));\n    };\n\n    socket.onclose = event => {\n      this.setState(prevState => ({\n        ...prevState,\n        authorized: false,\n        socket: null,\n        loading: false,\n        order: null\n      }));\n    };\n\n    socket.onmessage = async message => {\n      let data;\n\n      let { authorized, instruments, currentMarket, markets } = this.state;\n      \n      if (message.data === \"10\") return console.timeEnd(\"Ping-Pong\");\n\n      if (typeof message.data !== \"string\") {\n        var pbf = new Pbf(message.data);\n        data = Quote.read(pbf);\n\n        // data = protoQuotes.decode(bytearray);\n\n        if (markets[data.instrumentId]) {\n          const { instrumentId, bid, ask, time } = data;\n          markets[data.instrumentId].instrumentId = instrumentId;\n          markets[data.instrumentId].bid = bid;\n          markets[data.instrumentId].ask = ask;\n          markets[data.instrumentId].time = time;\n        }\n      } else {\n        data = JSON.parse(message.data);\n      }\n\n      const { type } = data;\n\n      switch (type) {\n        case 0: {\n          authorized = true;\n          break;\n        }\n        case 1: {\n          authorized = false;\n          break;\n        }\n        case 7: {\n          instruments = data.instruments;\n          break;\n        }\n        default: {\n          break;\n        }\n      }\n\n      if (!authorized) socket = null;\n\n      this.setState(prevState => ({\n        ...prevState,\n        authorized,\n        loading: false,\n        socket,\n        instruments,\n        currentMarket,\n        markets\n      }));\n    };\n\n    socket.onerror = error => {\n      this.setState(prevState => ({\n        ...prevState,\n        authorized: false,\n        socket: null,\n        loading: false\n      }));\n    };\n  };\n\n  request = body => {\n    const { socket } = this.state;\n    socket.send(body);\n  };\n\n  handleInstrumentClick = ({ sym }) => {\n    let { broker, account, markets } = this.state;\n\n    let marketsObj = { ...markets };\n    let syms = [];\n\n    if (marketsObj[sym]) {\n      delete marketsObj[sym];\n    } else {\n      marketsObj[sym] = { ...defaultQuote };\n    }\n\n    Object.keys(marketsObj).forEach(el => syms.push(el));\n\n    this.setState({ markets: marketsObj });\n\n    this.request(\n      JSON.stringify({\n        type: 1,\n        sub: [{ rec: { b: broker, a: account }, sym: syms }]\n      })\n    );\n  };\n\n  getInstruments = () => {\n    const { broker, account, socket } = this.state;\n    socket.send(JSON.stringify({ type: 2, rec: { b: broker, a: account } }));\n  };\n\n  pingPong = () => {\n    const { socket } = this.state;\n    console.time(\"Ping-Pong\");\n    socket.send(\"9\");\n  };\n\n  render() {\n    var { authorized, loading, instruments, markets } = this.state;\n    const button = loading ? (\n      <span>Loading</span>\n    ) : (\n      <button type=\"button\" onClick={this.handleConnectButtonClick}>\n        {authorized ? \"Disconnect\" : \"Connect\"}\n      </button>\n    );\n    return (\n      <div>\n        <div className=\"control\">\n          <div>\n            <div className=\"form-group\">\n              <label>Ендпоинт (ws[s]://...)</label>\n              <input\n                value={this.state.storageUrl}\n                onChange={e => this.handleInputChange(e, \"storageUrl\")}\n              />\n            </div>\n            <div className=\"form-group\">\n              <label>Юзер</label>\n              <input\n                value={this.state.userId}\n                onChange={e => this.handleInputChange(e, \"userId\")}\n              />\n            </div>\n          </div>\n          {authorized && (\n            <div>\n              <div className=\"form-group\">\n                <label>Брокер</label>\n                <input\n                  value={this.state.broker}\n                  onChange={e => this.handleInputChange(e, \"broker\")}\n                />\n              </div>\n              <div className=\"form-group\">\n                <label>Аккаунт</label>\n                <input\n                  value={this.state.account}\n                  onChange={e => this.handleInputChange(e, \"account\")}\n                />\n              </div>\n            </div>\n          )}\n\n          {button}\n        </div>\n\n        {authorized && (\n          <div>\n            <button onClick={this.getInstruments}>Get Instruments</button>\n            <button onClick={this.pingPong}>Ping-Pong</button>\n          </div>\n        )}\n\n        {instruments.map((el, i) => (\n          <button\n            className={markets[el.sym] && \"active\"}\n            key={i}\n            onClick={() => this.handleInstrumentClick({ sym: el.sym })}\n          >\n            {el.sym}\n          </button>\n        ))}\n\n        <hr />\n\n        <div className=\"body_wrap\">\n          <div className=\"trading_wrap\">\n            {Object.keys(markets).map(key => {\n              return (\n                <div key={key} className=\"trading\">\n                  <ul>\n                    <li>\n                      <b>instrument:</b> {markets[key].instrumentId}\n                    </li>\n                    <li>\n                      <b>bid:</b> {markets[key].bid}, <b>ask:</b>{\" \"}\n                      {markets[key].ask}\n                    </li>\n                    <li>\n                      <b>time:</b> {markets[key].time}\n                    </li>\n                  </ul>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}