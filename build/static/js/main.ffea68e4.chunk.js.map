{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","storageUrl","localStorage","getItem","authorized","loading","socket","consoleData","handleInputChange","event","key","value","target","setItem","_this","setState","Object","defineProperty","handleConnectButtonClick","_this$state","instruments","activeInstrument","close","WebSocket","e","message","initWebSocket","onopen","prevState","objectSpread","concat","toConsumableArray","request","JSON","stringify","user","userId","onclose","reason","wasClean","order","onmessage","type","parse","data","onerror","error","body","send","subscribe","brokerId","sub","rec","brk","acc","sym","prevProps","this","_this2","_this$state2","button","react_default","a","createElement","onClick","className","onChange","length","map","el","index","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ffea68e4.chunk.js","sourcesContent":["import React from \"react\";\n\nclass App extends React.Component {\n  state = {\n    storageUrl: localStorage.getItem(\"storageUrl\") || \"\",\n    authorized: false,\n    loading: false,\n    socket: null,\n    consoleData: []\n  };\n\n  handleInputChange = (event, key) => {\n    const { value } = event.target;\n    localStorage.setItem(key, value);\n    this.setState({ [key]: value });\n  };\n\n  handleConnectButtonClick = () => {\n    const { authorized, storageUrl } = this.state;\n    let { socket } = this.state;\n    if (!authorized) {\n      try {\n        socket = new WebSocket(storageUrl);\n      } catch (e) {\n        return this.setState({ consoleData: [e.message] });\n      }\n\n      this.setState({ socket, loading: true });\n    } else if (socket && authorized) {\n      this.setState({ instruments: [], activeInstrument: null });\n      socket.close();\n    }\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    if (!prevState.socket && this.state.socket) {\n      this.initWebSocket();\n    }\n  }\n\n  initWebSocket = () => {\n    let { socket } = this.state;\n\n    socket.onopen = () => {\n      this.setState(prevState => ({\n        ...prevState,\n        consoleData: [...prevState.consoleData, \"Соединение установлено.\"]\n      }));\n\n      this.request(JSON.stringify({ user: { userId: 666 } }));\n    };\n\n    socket.onclose = event => {\n      let reason = \"\";\n\n      if (event.wasClean) {\n        reason = \"Соединение закрыто\";\n      } else {\n        reason = \"Обрыв соединения\";\n      }\n\n      this.setState(prevState => ({\n        ...prevState,\n        consoleData: [...prevState.consoleData, reason],\n        authorized: false,\n        socket: null,\n        loading: false,\n        order: null\n      }));\n    };\n\n    socket.onmessage = message => {\n      const { type } = JSON.parse(message.data);\n\n      let { authorized } = this.state;\n\n      switch (type) {\n        case 0: {\n          authorized = true;\n          break;\n        }\n        case 1: {\n          authorized = false;\n          break;\n        }\n\n        default:\n          break;\n      }\n\n      if (!authorized) socket = null;\n\n      this.setState(prevState => ({\n        ...prevState,\n        consoleData: [\n          ...prevState.consoleData,\n          \"response ->   \" + message.data\n        ],\n        authorized,\n        loading: false,\n        socket\n      }));\n    };\n\n    socket.onerror = error => {\n      this.setState(prevState => ({\n        ...prevState,\n        consoleData: [...prevState.consoleData, \"Ошибка \" + error.message],\n        authorized: false,\n        socket: null,\n        loading: false\n      }));\n    };\n  };\n\n  request = body => {\n    const { socket } = this.state;\n    socket.send(body);\n    this.setState(prevState => ({\n      ...prevState,\n      consoleData: [...prevState.consoleData, \"request ->   \" + body]\n    }));\n  };\n\n  subscribe = brokerId => {\n    if (brokerId === \"default\") brokerId = 666;\n\n    this.request(\n      JSON.stringify({\n        type: 1,\n        sub: [{ rec: { brk: brokerId, acc: 666 }, sym: [\"EURUSD\", \"USDJPY\"] }]\n      })\n    );\n  };\n\n  render() {\n    var { authorized, consoleData, loading } = this.state;\n    const button = loading ? (\n      <span>Loading</span>\n    ) : (\n      <button type=\"button\" onClick={this.handleConnectButtonClick}>\n        {authorized ? \"Disconnect\" : \"Connect\"}\n      </button>\n    );\n    return (\n      <div>\n        <div className=\"control\">\n          <div className=\"form-group\">\n            <label>Ендпоинт (ws[s]://...)</label>\n            <input\n              value={this.state.storageUrl}\n              onChange={e => this.handleInputChange(e, \"storageUrl\")}\n            />\n          </div>\n\n          {button}\n        </div>\n\n        {authorized && (\n          <div>\n            <button onClick={() => this.subscribe(\"default\")}>Subscribe</button>\n          </div>\n        )}\n\n        {consoleData.length ? (\n          <div className=\"console-wrap\">\n            <button onClick={() => this.setState({ consoleData: [] })}>\n              Clear\n            </button>\n            {consoleData.map((el, index) => (\n              <p className=\"console\" key={index}>\n                {el}\n              </p>\n            ))}\n          </div>\n        ) : null}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}