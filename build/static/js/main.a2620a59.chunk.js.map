{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","storageUrl","localStorage","getItem","userId","broker","account","authorized","loading","socket","consoleData","protoQuotes","instruments","consoleContainer","React","createRef","currentMarket","handleInputChange","event","key","value","target","setItem","_this","setState","Object","defineProperty","handleConnectButtonClick","_this$state","activeInstrument","close","WebSocket","split","binaryType","e","message","initWebSocket","onopen","prevState","objectSpread","concat","toConsumableArray","request","JSON","stringify","user","onclose","reason","wasClean","order","onmessage","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","data","_this$state2","bytearray","type","wrap","_context","prev","next","Uint8Array","decode","parse","t0","abrupt","stop","this","_x","apply","arguments","onerror","error","body","send","subscribe","_ref2","sym","_this$state3","sub","rec","brk","acc","getInstruments","_this$state4","clearConsole","prevProps","current","scrollTop","scrollHeight","_this2","protobuf","load","then","root","lookupType","_this3","_this$state5","button","react_default","createElement","onClick","className","onChange","map","el","i","instrumentId","bid","ask","time","length","ref","index","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a2620a59.chunk.js","sourcesContent":["import React from \"react\";\n\nimport protobuf from \"protobufjs\";\n\nclass App extends React.Component {\n  state = {\n    storageUrl: localStorage.getItem(\"storageUrl\") || \"\",\n    userId: localStorage.getItem(\"userId\") || \"\",\n    broker: localStorage.getItem(\"broker\") || \"\",\n    account: localStorage.getItem(\"account\") || \"\",\n    authorized: false,\n    loading: false,\n    socket: null,\n    consoleData: [],\n    protoQuotes: null,\n    instruments: [],\n    consoleContainer: React.createRef(),\n    currentMarket: {}\n  };\n\n  handleInputChange = (event, key) => {\n    const { value } = event.target;\n    localStorage.setItem(key, value);\n    this.setState({ [key]: value });\n  };\n\n  handleConnectButtonClick = () => {\n    const { authorized, storageUrl, userId } = this.state;\n    let { socket } = this.state;\n    if (!authorized) {\n      try {\n        socket = new WebSocket(storageUrl.split(\"?\")[0] + \"?user=\" + userId);\n        socket.binaryType = \"arraybuffer\";\n      } catch (e) {\n        return this.setState({ consoleData: [e.message] });\n      }\n\n      this.setState({ socket, loading: true });\n    } else if (socket && authorized) {\n      this.setState({ instruments: [], activeInstrument: null });\n      socket.close();\n    }\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    const { consoleContainer } = this.state;\n\n    if (consoleContainer.current) {\n      consoleContainer.current.scrollTop =\n        consoleContainer.current.scrollHeight;\n    }\n\n    if (!prevState.socket && this.state.socket) {\n      this.initWebSocket();\n    }\n  }\n\n  componentDidMount() {\n    protobuf.load(\"proto/awesome.proto\").then(root => {\n      var protoQuotes = root.lookupType(\"protobuf.quotes.Quote\");\n\n      this.setState(prevState => ({\n        ...prevState,\n        protoQuotes\n      }));\n    });\n  }\n\n  initWebSocket = () => {\n    let { socket } = this.state;\n\n    socket.onopen = () => {\n      this.setState(prevState => ({\n        ...prevState,\n        consoleData: [...prevState.consoleData, \"Соединение установлено.\"]\n      }));\n\n      this.request(JSON.stringify({ user: { userId: 666 } }));\n    };\n\n    socket.onclose = event => {\n      let reason = \"\";\n\n      if (event.wasClean) {\n        reason = \"Соединение закрыто\";\n      } else {\n        reason = \"Обрыв соединения\";\n      }\n\n      this.setState(prevState => ({\n        ...prevState,\n        consoleData: [...prevState.consoleData, reason],\n        authorized: false,\n        socket: null,\n        loading: false,\n        order: null\n      }));\n    };\n\n    socket.onmessage = async message => {\n      let data;\n\n      let { authorized, protoQuotes, instruments, currentMarket } = this.state;\n\n      if (typeof message.data !== \"string\") {\n        var bytearray = new Uint8Array(message.data);\n        data = protoQuotes.decode(bytearray);\n        currentMarket = data;\n      } else {\n        data = JSON.parse(message.data);\n      }\n\n      const { type } = data;\n\n      switch (type) {\n        case 0: {\n          authorized = true;\n          break;\n        }\n        case 1: {\n          authorized = false;\n          break;\n        }\n        case 7: {\n          instruments = data.instruments;\n          break;\n        }\n        default: {\n          break;\n        }\n      }\n\n      if (!authorized) socket = null;\n\n      this.setState(prevState => ({\n        ...prevState,\n        consoleData: [JSON.stringify(data)],\n        authorized,\n        loading: false,\n        socket,\n        instruments,\n        currentMarket\n      }));\n    };\n\n    socket.onerror = error => {\n      this.setState(prevState => ({\n        ...prevState,\n        consoleData: [...prevState.consoleData, \"Ошибка \" + error.message],\n        authorized: false,\n        socket: null,\n        loading: false\n      }));\n    };\n  };\n\n  request = body => {\n    const { socket } = this.state;\n    socket.send(body);\n\n    this.setState(prevState => ({\n      ...prevState,\n      consoleData: [...prevState.consoleData, \"request ->   \" + body]\n    }));\n  };\n\n  subscribe = ({ sym }) => {\n    const { broker, account } = this.state;\n\n    this.request(\n      JSON.stringify({\n        type: 1,\n        sub: [{ rec: { brk: broker, acc: account }, sym: [sym] }]\n      })\n    );\n  };\n\n  getInstruments = () => {\n    const { broker, account, socket } = this.state;\n    socket.send(\n      JSON.stringify({ type: 2, rec: { brk: broker, acc: account } })\n    );\n  };\n\n  clearConsole = () => {\n    this.setState({ consoleData: [] });\n  };\n\n  render() {\n    var {\n      authorized,\n      consoleData,\n      loading,\n      instruments,\n      currentMarket\n    } = this.state;\n    const button = loading ? (\n      <span>Loading</span>\n    ) : (\n      <button type=\"button\" onClick={this.handleConnectButtonClick}>\n        {authorized ? \"Disconnect\" : \"Connect\"}\n      </button>\n    );\n    return (\n      <div>\n        <div className=\"control\">\n          <div>\n            <div className=\"form-group\">\n              <label>Ендпоинт (ws[s]://...)</label>\n              <input\n                value={this.state.storageUrl}\n                onChange={e => this.handleInputChange(e, \"storageUrl\")}\n              />\n            </div>\n            <div className=\"form-group\">\n              <label>Юзер</label>\n              <input\n                value={this.state.userId}\n                onChange={e => this.handleInputChange(e, \"userId\")}\n              />\n            </div>\n          </div>\n          {authorized && (\n            <div>\n              <div className=\"form-group\">\n                <label>Брокер</label>\n                <input\n                  value={this.state.broker}\n                  onChange={e => this.handleInputChange(e, \"broker\")}\n                />\n              </div>\n              <div className=\"form-group\">\n                <label>Аккаунт</label>\n                <input\n                  value={this.state.account}\n                  onChange={e => this.handleInputChange(e, \"account\")}\n                />\n              </div>\n            </div>\n          )}\n\n          {button}\n        </div>\n\n        {authorized && (\n          <div>\n            <button onClick={this.getInstruments}>Get Instruments</button>\n          </div>\n        )}\n\n        {instruments.map((el, i) => (\n          <button key={i} onClick={() => this.subscribe({ sym: el.sym })}>\n            {el.sym}\n          </button>\n        ))}\n\n        <hr />\n\n        <div className=\"body_wrap\">\n          <div className=\"trading\">\n            <ul>\n              <li>\n                <b>instrument:</b> {currentMarket.instrumentId}\n              </li>\n              <li>\n                <b>bid:</b> {currentMarket.bid}, <b>ask:</b> {currentMarket.ask}\n              </li>\n              <li>\n                <b>time:</b> {currentMarket.time}\n              </li>\n            </ul>\n          </div>\n          {consoleData.length ? (\n            <div className=\"console\">\n              <button onClick={this.clearConsole}>Clear</button>\n              <div className=\"console-wrap\" ref={this.state.consoleContainer}>\n                {consoleData.map((el, index) => (\n                  <p key={index}>{el}</p>\n                ))}\n              </div>\n            </div>\n          ) : null}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}