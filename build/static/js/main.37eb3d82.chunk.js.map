{"version":3,"sources":["proto/awesome.js","components/Order/Order.js","components/Stress/Stress.js","App.js","serviceWorker.js","index.js"],"names":["Quote","exports","read","pbf","end","readFields","_readField","rec","instrumentId","bid","ask","time","tag","obj","Recipient","readVarint","pos","readString","write","writeMessage","writeStringField","writeVarintField","brokerId","accountId","order","props","_props$sub","sub","react_default","a","createElement","className","stress","start","inputChange","enabled","perSecond","seconds","onClick","onChange","e","value","type","window","limits","defaultQuote","App","state","storageUrl","localStorage","getItem","userId","broker","account","authorized","loading","socket","instruments","subscriptions","orders","stressEnabled","handleInputChange","event","key","target","setItem","_this","setState","Object","defineProperty","handleConnectButtonClick","_this$state","close","WebSocket","split","binaryType","Error","initWebSocket","onopen","onmessage","_ref","asyncToGenerator","regenerator_default","mark","_callee","message","data","_this$state2","_data","newSubscriptions","wrap","_context","prev","next","abrupt","console","timeEnd","Pbf","JSON","parse","t0","s","sym","forEach","el","prevState","objectSpread","stop","this","_x","apply","arguments","onerror","error","log","onclose","request","body","send","handleInstrumentClick","_ref2","hashCode","_this$state3","subsObj","syms","keys","push","str","hash","i","length","charCodeAt","stringToHash","stringify","b","getInstruments","_this$state4","pingPong","handleStressTest","_callee2","_this$state5","j","_context2","Promise","res","rej","setTimeout","Math","floor","randomProperty","prevProps","_this2","_this$state6","button","Stress","map","Order","React","Component","random","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.37eb3d82.chunk.js","sourcesContent":["// Quote ========================================\n\nvar Quote = exports.Quote = {};\n\nQuote.read = function (pbf, end) {\n    return pbf.readFields(Quote._readField, {rec: null, instrumentId: \"\", bid: \"\", ask: \"\", time: 0}, end);\n};\nQuote._readField = function (tag, obj, pbf) {\n    if (tag === 1) obj.rec = Recipient.read(pbf, pbf.readVarint() + pbf.pos);\n    else if (tag === 2) obj.instrumentId = pbf.readString();\n    else if (tag === 3) obj.bid = pbf.readString();\n    else if (tag === 4) obj.ask = pbf.readString();\n    else if (tag === 5) obj.time = pbf.readVarint(true);\n};\nQuote.write = function (obj, pbf) {\n    if (obj.rec) pbf.writeMessage(1, Recipient.write, obj.rec);\n    if (obj.instrumentId) pbf.writeStringField(2, obj.instrumentId);\n    if (obj.bid) pbf.writeStringField(3, obj.bid);\n    if (obj.ask) pbf.writeStringField(4, obj.ask);\n    if (obj.time) pbf.writeVarintField(5, obj.time);\n};\n\n// Recipient ========================================\n\nvar Recipient = exports.Recipient = {};\n\nRecipient.read = function (pbf, end) {\n    return pbf.readFields(Recipient._readField, {brokerId: 0, accountId: 0}, end);\n};\nRecipient._readField = function (tag, obj, pbf) {\n    if (tag === 1) obj.brokerId = pbf.readVarint(true);\n    else if (tag === 2) obj.accountId = pbf.readVarint(true);\n};\nRecipient.write = function (obj, pbf) {\n    if (obj.brokerId) pbf.writeVarintField(1, obj.brokerId);\n    if (obj.accountId) pbf.writeVarintField(2, obj.accountId);\n};\n","import React from 'react'\n\nconst order = props => {\n  const { instrumentId, bid, ask, time } = props.sub;\n  return (\n    <div className=\"trading\">\n      <ul>\n        <li>\n          <b>instrument:</b> {instrumentId}\n        </li>\n        <li>\n          <b>bid:</b> {bid}, <b>ask:</b> {ask}\n        </li>\n        <li>\n          <b>time:</b> {time}\n        </li>\n      </ul>\n    </div>\n  );\n};\n\nexport default order;\n","import React from \"react\";\n\nconst stress = props => {\n  const { start, inputChange, enabled, perSecond, seconds } = props;\n  return (\n    <div className=\"stress\">\n      {!enabled && <button onClick={start}>Stress</button>}\n      <input\n        onChange={e => inputChange(e, \"perSecond\")}\n        value={perSecond}\n        type=\"number\"\n      />{\" \"}\n      per. sec.\n      <input\n        onChange={e => inputChange(e, \"seconds\")}\n        value={seconds}\n        type=\"number\"\n      />{\" \"}\n      repeat sec\n    </div>\n  );\n};\n\nexport default stress;\n","import React from \"react\";\nimport Pbf from \"pbf\";\nimport { Quote } from \"./proto/awesome\";\nimport Order from \"./components/Order/Order\";\nimport Stress from \"./components/Stress/Stress\";\n\nwindow.limits = {\n  perSecond: 200,\n  seconds: 60\n};\n\nconst defaultQuote = {\n  instrumentId: 0,\n  bid: 0,\n  ask: 0,\n  time: 0\n};\n\nclass App extends React.Component {\n  state = {\n    storageUrl: localStorage.getItem(\"storageUrl\") || \"\",\n    userId: localStorage.getItem(\"userId\") || \"\",\n    broker: localStorage.getItem(\"broker\") || \"\",\n    account: localStorage.getItem(\"account\") || \"\",\n    perSecond: localStorage.getItem(\"perSecond\") || 10,\n    seconds: localStorage.getItem(\"seconds\") || 1,\n    authorized: false,\n    loading: false,\n    socket: null,\n    instruments: [],\n    subscriptions: {},\n    orders: {},\n    stressEnabled: false\n  };\n\n  handleInputChange = (event, key) => {\n    let { value } = event.target;\n\n    if (key === \"perSecond\" && value > window.limits.perSecond)\n      value = window.limits.perSecond;\n    if (key === \"seconds\" && value > window.limits.seconds)\n      value = window.limits.seconds;\n\n    localStorage.setItem(key, value);\n    this.setState({ [key]: value });\n  };\n\n  handleConnectButtonClick = () => {\n    const { authorized, storageUrl, userId } = this.state;\n    let { socket } = this.state;\n\n    if (!authorized) {\n      try {\n        socket = new WebSocket(storageUrl.split(\"?\")[0] + \"?user=\" + userId);\n        socket.binaryType = \"arraybuffer\";\n      } catch (e) {\n        throw new Error(e);\n      }\n\n      this.setState({ socket, loading: true });\n    } else if (socket && authorized) {\n      this.setState({ instruments: [], socket: null });\n\n      socket.close();\n    }\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    if (!prevState.socket && this.state.socket) {\n      this.initWebSocket();\n    }\n  }\n\n  initWebSocket = () => {\n    let { socket } = this.state;\n\n    socket.onopen = () => {\n      this.setState({\n        authorized: true\n      });\n    };\n\n    socket.onmessage = async message => {\n      let data;\n\n      let { instruments, subscriptions, orders } = this.state;\n\n      if (message.data === \"1\") return console.timeEnd(\"Ping-Pong\");\n\n      if (typeof message.data !== \"string\") {\n        let pbf = new Pbf(message.data);\n\n        data = Quote.read(pbf);\n\n        const { instrumentId, bid, ask, time } = data;\n\n        let sub = subscriptions[instrumentId];\n\n        if (sub) {\n          sub.instrumentId = instrumentId;\n          sub.bid = bid;\n          sub.ask = ask;\n          sub.time = time;\n        } else {\n          orders[instrumentId] = {\n            instrumentId,\n            bid,\n            ask,\n            time\n          };\n        }\n      } else {\n        data = JSON.parse(message.data);\n      }\n\n      const { type } = data;\n\n      let newSubscriptions = null;\n\n      switch (type) {\n        case 7: {\n          instruments = data.instruments;\n          break;\n        }\n        case 10: {\n          newSubscriptions = {};\n\n          data.s.sub[0].sym.forEach(el => {\n            delete orders[el];\n\n            if (!subscriptions[el]) {\n              newSubscriptions[el] = {\n                instrumentId: el\n              };\n            } else {\n              newSubscriptions[el] = subscriptions[el];\n            }\n          });\n\n          break;\n        }\n        default: {\n          break;\n        }\n      }\n\n      this.setState(prevState => ({\n        ...prevState,\n        loading: false,\n        instruments,\n        subscriptions: newSubscriptions || subscriptions,\n        orders\n      }));\n    };\n\n    socket.onerror = error => {\n      console.log(error);\n    };\n\n    socket.onclose = () => {\n      this.setState({\n        authorized: false,\n        socket: null,\n        subscriptions: {}\n      });\n    };\n  };\n\n  request = body => {\n    const { socket } = this.state;\n    socket.send(body);\n  };\n\n  handleInstrumentClick = ({ sym }) => {\n    let { broker, account, subscriptions } = this.state;\n\n    let subsObj = { ...subscriptions };\n    let syms = [],\n      hashCode;\n\n    if (subsObj[sym]) {\n      delete subsObj[sym];\n    } else {\n      subsObj[sym] = { ...defaultQuote };\n    }\n\n    Object.keys(subsObj).forEach(el => syms.push(el));\n\n    this.setState({ subscriptions: subsObj });\n\n    hashCode = stringToHash(broker + \"&\" + account + \"&\" + syms);\n\n    this.request(\n      JSON.stringify({\n        type: 1,\n        s: {\n          sub: [{ rec: { b: broker, a: account }, sym: syms }],\n          hash: hashCode\n        }\n      })\n    );\n  };\n\n  getInstruments = () => {\n    const { broker, account, socket } = this.state;\n\n    socket.send(JSON.stringify({ type: 2, rec: { b: broker, a: account } }));\n  };\n\n  pingPong = () => {\n    const { socket } = this.state;\n    console.time(\"Ping-Pong\");\n    socket.send(\"0\");\n  };\n\n  handleStressTest = async () => {\n    const { perSecond, seconds, instruments } = this.state;\n\n    this.setState({ stressEnabled: true });\n\n    const stress = sym => {\n      return new Promise((res, rej) => {\n        this.handleInstrumentClick({ sym });\n        setTimeout(res, Math.floor(1000 / +perSecond));\n      });\n    };\n\n    for (let i = 0; i < +seconds; i++) {\n      for (let j = 0; j < +perSecond; j++) {\n        await stress(randomProperty(instruments));\n      }\n    }\n\n    this.setState({ stressEnabled: false });\n  };\n\n  render() {\n    var {\n      authorized,\n      loading,\n      instruments,\n      subscriptions,\n      orders,\n      perSecond,\n      seconds,\n      stressEnabled\n    } = this.state;\n    const button = loading ? (\n      <span>Loading</span>\n    ) : (\n      <button type=\"button\" onClick={this.handleConnectButtonClick}>\n        {authorized ? \"Disconnect\" : \"Connect\"}\n      </button>\n    );\n    return (\n      <div>\n        <div className=\"control\">\n          <div>\n            <div className=\"form-group\">\n              <label>Ендпоинт (ws[s]://...)</label>\n              <input\n                value={this.state.storageUrl}\n                onChange={e => this.handleInputChange(e, \"storageUrl\")}\n              />\n            </div>\n            <div className=\"form-group\">\n              <label>Юзер</label>\n              <input\n                value={this.state.userId}\n                onChange={e => this.handleInputChange(e, \"userId\")}\n              />\n            </div>\n          </div>\n\n          {authorized && (\n            <div>\n              <div className=\"form-group\">\n                <label>Брокер</label>\n                <input\n                  value={this.state.broker}\n                  onChange={e => this.handleInputChange(e, \"broker\")}\n                />\n              </div>\n              <div className=\"form-group\">\n                <label>Аккаунт</label>\n                <input\n                  value={this.state.account}\n                  onChange={e => this.handleInputChange(e, \"account\")}\n                />\n              </div>\n            </div>\n          )}\n\n          {button}\n        </div>\n\n        {authorized && (\n          <div>\n            <button onClick={this.getInstruments}>Get Instruments</button>\n            <button onClick={this.pingPong}>Ping-Pong</button>\n            <Stress\n              enabled={stressEnabled}\n              inputChange={this.handleInputChange}\n              perSecond={perSecond}\n              seconds={seconds}\n              start={this.handleStressTest}\n            />\n          </div>\n        )}\n        <div className=\"instruments\">\n          {instruments.map((el, i) => (\n            <button\n              className={subscriptions[el.sym] && \"active\"}\n              key={i}\n              onClick={() => this.handleInstrumentClick({ sym: el.sym })}\n            >\n              {el.sym}\n            </button>\n          ))}\n        </div>\n\n        <hr />\n        {authorized && (\n          <div className=\"body_wrap\">\n            <div className=\"trading_wrap\">\n              <div className=\"tr_item\">\n                <h2>Subscriptions:</h2>\n                {Object.keys(subscriptions).map(key => (\n                  <Order key={key} sub={subscriptions[key]} />\n                ))}\n              </div>\n              <div className=\"tr_item orders\">\n                <h2>Orders:</h2>\n                {Object.keys(orders).map(key => (\n                  <Order key={key} sub={orders[key]} />\n                ))}\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nvar randomProperty = function(obj) {\n  var keys = Object.keys(obj);\n  return keys[(keys.length * Math.random()) << 0];\n};\n\nfunction stringToHash(str) {\n  var hash = 5381,\n    i = str.length;\n\n  while (i) {\n    hash = (hash * 33) ^ str.charCodeAt(--i);\n  }\n\n  return hash >>> 0;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n// import { createStore, applyMiddleware } from \"redux\";\n// import thunk from \"redux-thunk\";\n// import rootReducer from \"./store/reducers/index\";\n// import { Provider } from \"react-redux\";\n\n// const store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(\n  //   <Provider store={store}>\n  <App />,\n  /*</Provider>*/ document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}