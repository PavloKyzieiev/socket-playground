{"version":3,"sources":["proto/awesome.js","components/Order/Order.js","components/Stress/Stress.js","components/Instruments/Instruments.js","components/UI/Input/Input.js","utils/objects.js","store/actions/actionTypes.js","store/actions/market.js","store/actions/socket.js","App.js","utils/strings.js","serviceWorker.js","store/reducers/socket.js","store/reducers/market.js","store/reducers/index.js","index.js"],"names":["Quote","exports","read","pbf","end","readFields","_readField","rec","instrumentId","bid","ask","time","tag","obj","Recipient","readVarint","pos","readString","write","writeMessage","writeStringField","writeVarintField","brokerId","accountId","order","props","_props$sub","sub","react_default","a","createElement","className","stress","start","inputChange","enabled","perSecond","seconds","onClick","onChange","e","value","type","connect","state","subscriptions","market","instruments","handleClick","map","el","i","sym","key","input","label","changeHangler","deepClone","newObj","Object","objectSpread","SOCKET_CONNECT_START","SOCKET_CONNECT_SUCCESS","SOCKET_CONNECT_ERROR","FETCH_INSTRUMENTS_START","FETCH_INSTRUMENTS_SUCCESS","SET_ORDERS","SET_SUBSCRIPTIONS","defaultQuote","fetchInstruments","broker","account","dispatch","getState","socket","actionTypes","send","JSON","stringify","b","setSubscriptions","initSocket","socketUrl","WebSocket","binaryType","onerror","error","initSocketError","onopen","initSocketSuccess","onmessage","message","data","_getState$market","orders","ordersObj","newSubscriptions","subscriptionsObj","Pbf","_data","parse","s","forEach","setOrders","window","limits","App","storageUrl","localStorage","getItem","userId","stressEnabled","handleInputChange","event","target","setItem","_this","setState","defineProperty","handleConnectButtonClick","_this$state","initWebSocket","split","request","body","handleInstrumentClick","_this$state2","setInstrument","getInstruments","_this$state3","handleStressTest","_callee","_this$state4","j","randIndex","regenerator_default","wrap","_context","prev","next","Promise","res","rej","setTimeout","Math","floor","random","length","stop","this","_this2","_this$state5","_this$props","authorized","loading","Fragment","Input","Stress","Instruments","keys","Order","React","Component","url","hashCode","subsObj","syms","push","str","hash","charCodeAt","stringToHash","Boolean","location","hostname","match","initialState","combineReducers","arguments","undefined","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3916c55b.chunk.js","sourcesContent":["// Quote ========================================\n\nvar Quote = exports.Quote = {};\n\nQuote.read = function (pbf, end) {\n    return pbf.readFields(Quote._readField, {rec: null, instrumentId: \"\", bid: \"\", ask: \"\", time: 0}, end);\n};\nQuote._readField = function (tag, obj, pbf) {\n    if (tag === 1) obj.rec = Recipient.read(pbf, pbf.readVarint() + pbf.pos);\n    else if (tag === 2) obj.instrumentId = pbf.readString();\n    else if (tag === 3) obj.bid = pbf.readString();\n    else if (tag === 4) obj.ask = pbf.readString();\n    else if (tag === 5) obj.time = pbf.readVarint(true);\n};\nQuote.write = function (obj, pbf) {\n    if (obj.rec) pbf.writeMessage(1, Recipient.write, obj.rec);\n    if (obj.instrumentId) pbf.writeStringField(2, obj.instrumentId);\n    if (obj.bid) pbf.writeStringField(3, obj.bid);\n    if (obj.ask) pbf.writeStringField(4, obj.ask);\n    if (obj.time) pbf.writeVarintField(5, obj.time);\n};\n\n// Recipient ========================================\n\nvar Recipient = exports.Recipient = {};\n\nRecipient.read = function (pbf, end) {\n    return pbf.readFields(Recipient._readField, {brokerId: 0, accountId: 0}, end);\n};\nRecipient._readField = function (tag, obj, pbf) {\n    if (tag === 1) obj.brokerId = pbf.readVarint(true);\n    else if (tag === 2) obj.accountId = pbf.readVarint(true);\n};\nRecipient.write = function (obj, pbf) {\n    if (obj.brokerId) pbf.writeVarintField(1, obj.brokerId);\n    if (obj.accountId) pbf.writeVarintField(2, obj.accountId);\n};\n","import React from 'react'\n\nconst order = props => {\n  const { instrumentId, bid, ask, time } = props.sub;\n  return (\n    <div className=\"trading\">\n      <ul>\n        <li>\n          <b>instrument:</b> {instrumentId}\n        </li>\n        <li>\n          <b>bid:</b> {bid}, <b>ask:</b> {ask}\n        </li>\n        <li>\n          <b>time:</b> {time}\n        </li>\n      </ul>\n    </div>\n  );\n};\n\nexport default order;\n","import React from \"react\";\n\nconst stress = props => {\n  const { start, inputChange, enabled, perSecond, seconds } = props;\n  return (\n    <div className=\"stress\">\n      {!enabled && <button onClick={start}>Stress</button>}\n      <input\n        onChange={e => inputChange(e, \"perSecond\")}\n        value={perSecond}\n        type=\"number\"\n      />{\" \"}\n      per. sec.\n      <input\n        onChange={e => inputChange(e, \"seconds\")}\n        value={seconds}\n        type=\"number\"\n      />{\" \"}\n      repeat sec\n    </div>\n  );\n};\n\nexport default stress;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nconst instruments = props => {\n  const { instruments, subscriptions, handleClick } = props;\n  return (\n    <div className=\"instruments\">\n      {instruments.map((el, i) => (\n        <button\n          className={subscriptions[el.sym] && \"active\"}\n          key={i}\n          onClick={() => handleClick(el.sym)}\n        >\n          {el.sym}\n        </button>\n      ))}\n    </div>\n  );\n};\n\nconst mapStateToProps = state => {\n  return {\n    subscriptions: state.market.subscriptions,\n    instruments: state.market.instruments\n  };\n};\n\nexport default connect(mapStateToProps)(instruments);\n","import React from \"react\";\n\nconst input = props => {\n  const { label, value, changeHangler } = props;\n  return (\n    <div className=\"form-group\">\n      <label>{label}</label>\n      <input value={value} onChange={changeHangler} />\n    </div>\n  );\n};\n\nexport default input;\n","export function deepClone(obj) {\n  let newObj = { ...obj };\n\n  for (let key in newObj) {\n    let el = newObj[key];\n    if (typeof el === \"object\" && el !== null) {\n      el = deepClone(el);\n    }\n  }\n\n  return newObj;\n}\n","export const SOCKET_CONNECT_START = \"USER_CONNECT_START\";\nexport const SOCKET_CONNECT_SUCCESS = \"USER_CONNECT_SUCCESS\";\nexport const SOCKET_CONNECT_ERROR = \"USER_CONNECT_ERROR\";\n\nexport const FETCH_INSTRUMENTS_START = \"FETCH_INSTRUMENTS_START\";\nexport const FETCH_INSTRUMENTS_SUCCESS = \"FETCH_INSTRUMENTS_SUCCESS\";\n\nexport const SET_ORDERS = \"SET_ORDERS\";\nexport const SET_SUBSCRIPTIONS = \"SET_SUBSCRIPTIONS\";\n\nexport const PRICE_MESSAGE = \"PRICE_MESSAGE\";\nexport const SUBSCRIPTIONS_MESSAGE = \"SUBSCRIPTIONS_MESSAGE\";\n","import * as actionTypes from \"./actionTypes\";\n\nimport { deepClone } from \"../../utils/objects\";\nimport { stringToHash } from \"../../utils/strings\";\n\nconst defaultQuote = {\n  instrumentId: 0,\n  bid: 0,\n  ask: 0,\n  time: 0\n};\n\nexport function fetchInstruments(broker, account) {\n  return (dispatch, getState) => {\n    const { socket } = getState().socket;\n    dispatch(fetchInstrumentsStart());\n    socket.send(JSON.stringify({ type: 2, rec: { b: broker, a: account } }));\n  };\n}\n\nexport function setInstrument(sym, broker, account) {\n  return (dispatch, getState) => {\n    let state = getState();\n    let { subscriptions } = state.market;\n    let { socket } = state.socket;\n\n    let subsObj = deepClone(subscriptions);\n    let syms = [],\n      hashCode;\n\n    if (subsObj[sym]) {\n      delete subsObj[sym];\n    } else {\n      subsObj[sym] = { ...defaultQuote };\n      subsObj[sym].instrumentId = sym;\n    }\n\n    Object.keys(subsObj).forEach(el => syms.push(el));\n\n    dispatch(setSubscriptions(subsObj));\n\n    hashCode = stringToHash(broker + \"&\" + account + \"&\" + syms);\n\n    socket.send(\n      JSON.stringify({\n        type: 1,\n        s: {\n          sub: [{ rec: { b: broker, a: account }, sym: syms }],\n          hash: hashCode\n        }\n      })\n    );\n  };\n}\n\nfunction fetchInstrumentsStart() {\n  return {\n    type: actionTypes.FETCH_INSTRUMENTS_START\n  };\n}\n\nexport function fetchInstrumentsSuccess(instruments) {\n  return {\n    type: actionTypes.FETCH_INSTRUMENTS_SUCCESS,\n    instruments\n  };\n}\n\nexport function setOrders(orders) {\n  return {\n    type: actionTypes.SET_ORDERS,\n    orders\n  };\n}\n\nexport function setSubscriptions(subscriptions) {\n  return {\n    type: actionTypes.SET_SUBSCRIPTIONS,\n    subscriptions\n  };\n}\n","import Pbf from \"pbf\";\nimport { Quote } from \"../../proto/awesome\";\nimport { deepClone } from \"../../utils/objects\";\n\nimport * as actionTypes from \"./actionTypes\";\n\nimport { fetchInstrumentsSuccess, setSubscriptions, setOrders } from \"./market\";\n\nexport function initSocket(socketUrl) {\n  return (dispatch, getState) => {\n    dispatch(initSocketStart());\n\n    let socket = new WebSocket(socketUrl);\n\n    socket.binaryType = \"arraybuffer\";\n\n    socket.onerror = error => {\n      dispatch(initSocketError(error));\n    };\n\n    socket.onopen = () => {\n      dispatch(initSocketSuccess(socket));\n    };\n\n    socket.onmessage = message => {\n      let data;\n      let { subscriptions, orders } = getState().market;\n      let ordersObj = null;\n      let newSubscriptions = null;\n      let subscriptionsObj = null;\n\n      if (typeof message.data !== \"string\") {\n\n        let pbf = new Pbf(message.data);\n\n        data = Quote.read(pbf);\n\n        const { instrumentId, bid, ask, time } = data;\n\n        subscriptionsObj = deepClone(subscriptions);\n        let sub = subscriptionsObj[instrumentId];\n\n        if (sub) {\n          sub.instrumentId = instrumentId;\n          sub.bid = bid;\n          sub.ask = ask;\n          sub.time = time;\n        } else {\n          ordersObj = deepClone(orders);\n          ordersObj[instrumentId] = {\n            instrumentId,\n            bid,\n            ask,\n            time\n          };\n        }\n\n      } else {\n        data = JSON.parse(message.data);\n      }\n\n      const { type } = data;\n\n      switch (type) {\n        case 7: {\n          return dispatch(fetchInstrumentsSuccess(data.instruments));\n        }\n        case 10: {\n          newSubscriptions = {};\n\n          data.s.sub[0].sym.forEach(el => {\n            if (!ordersObj) ordersObj = deepClone(orders);\n\n            delete ordersObj[el];\n\n            if (!subscriptions[el]) {\n              newSubscriptions[el] = {\n                instrumentId: el\n              };\n            } else {\n              if (!subscriptionsObj)\n                subscriptionsObj = deepClone(subscriptions);\n\n              newSubscriptions[el] = subscriptionsObj[el];\n            }\n          });\n\n          break;\n        }\n        default: {\n          break;\n        }\n      }\n\n      if (newSubscriptions) dispatch(setSubscriptions(newSubscriptions));\n      if (ordersObj) dispatch(setOrders(ordersObj));\n    };\n  };\n}\n\nfunction initSocketStart() {\n  return {\n    type: actionTypes.SOCKET_CONNECT_START\n  };\n}\n\nfunction initSocketSuccess(socket) {\n  return {\n    type: actionTypes.SOCKET_CONNECT_SUCCESS,\n    socket\n  };\n}\n\nfunction initSocketError(error) {\n  return {\n    type: actionTypes.SOCKET_CONNECT_ERROR,\n    error\n  };\n}\n","import React from \"react\";\nimport Order from \"./components/Order/Order\";\nimport Stress from \"./components/Stress/Stress\";\nimport Instruments from \"./components/Instruments/Instruments\";\nimport Input from \"./components/UI/Input/Input\";\n\nimport { connect } from \"react-redux\";\nimport { initSocket } from \"./store/actions/socket\";\nimport { fetchInstruments, setInstrument } from \"./store/actions/market\";\n\nwindow.limits = {\n  perSecond: 200,\n  seconds: 60\n};\n\nclass App extends React.Component {\n  state = {\n    storageUrl: localStorage.getItem(\"storageUrl\") || \"\",\n    userId: localStorage.getItem(\"userId\") || \"\",\n    broker: localStorage.getItem(\"broker\") || \"\",\n    account: localStorage.getItem(\"account\") || \"\",\n    perSecond: localStorage.getItem(\"perSecond\") || 10,\n    seconds: localStorage.getItem(\"seconds\") || 1,\n    stressEnabled: false\n  };\n\n  handleInputChange = (event, key) => {\n    let { value } = event.target;\n\n    if (key === \"perSecond\" && value > window.limits.perSecond)\n      value = window.limits.perSecond;\n    if (key === \"seconds\" && value > window.limits.seconds)\n      value = window.limits.seconds;\n\n    localStorage.setItem(key, value);\n    this.setState({ [key]: value });\n  };\n\n  handleConnectButtonClick = () => {\n    const { storageUrl, userId } = this.state;\n    this.props.initWebSocket(storageUrl.split(\"?\")[0] + \"?user=\" + userId);\n  };\n\n  request = body => {\n    const { socket } = this.state;\n    socket.send(body);\n  };\n\n  handleInstrumentClick = sym => {\n    const { broker, account } = this.state;\n    this.props.setInstrument(sym, broker, account);\n  };\n\n  getInstruments = () => {\n    const { broker, account } = this.state;\n    this.props.fetchInstruments(broker, account);\n  };\n\n  handleStressTest = async () => {\n    const { seconds, perSecond } = this.state;\n    const { instruments } = this.props;\n\n    this.setState({ stressEnabled: true });\n\n    const stress = sym => {\n      return new Promise((res, rej) => {\n        this.handleInstrumentClick(sym);\n        setTimeout(res, Math.floor(1000 / +perSecond));\n      });\n    };\n\n    for (let i = 0; i < +seconds; i++) {\n      for (let j = 0; j < +perSecond; j++) {\n        let randIndex = Math.floor(Math.random() * instruments.length);\n        await stress(instruments[randIndex].sym);\n      }\n    }\n\n    this.setState({ stressEnabled: false });\n  };\n\n  render() {\n    let { perSecond, seconds, stressEnabled } = this.state;\n\n    let {\n      authorized,\n      loading,\n      instruments,\n      subscriptions,\n      orders\n    } = this.props;\n\n    return (\n      <div>\n        <div className=\"control\">\n          <>\n            <Input\n              label=\"Ендпоинт (ws[s]://...)\"\n              value={this.state.storageUrl}\n              changeHangler={e => this.handleInputChange(e, \"storageUrl\")}\n            />\n            <Input\n              label=\"Юзер\"\n              value={this.state.userId}\n              changeHangler={e => this.handleInputChange(e, \"userId\")}\n            />\n          </>\n\n          {authorized && (\n            <>\n              <Input\n                label=\"Брокер\"\n                value={this.state.broker}\n                changeHangler={e => this.handleInputChange(e, \"broker\")}\n              />\n              <Input\n                label=\"Аккаунт\"\n                value={this.state.account}\n                changeHangler={e => this.handleInputChange(e, \"account\")}\n              />\n            </>\n          )}\n\n          {loading ? (\n            <span>Loading</span>\n          ) : (\n            !authorized && (\n              <button type=\"button\" onClick={this.handleConnectButtonClick}>\n                Connect\n              </button>\n            )\n          )}\n        </div>\n\n        {authorized && (\n          <div>\n            <button onClick={this.getInstruments}>Get Instruments</button>\n            {instruments.length > 0 ? (\n              <Stress\n                enabled={stressEnabled}\n                inputChange={this.handleInputChange}\n                perSecond={perSecond}\n                seconds={seconds}\n                start={this.handleStressTest}\n              />\n            ) : null}\n          </div>\n        )}\n\n        <Instruments handleClick={this.handleInstrumentClick} />\n\n        <hr />\n        {authorized && (\n          <div className=\"body_wrap\">\n            <div className=\"trading_wrap\">\n              <div className=\"tr_item\">\n                <h2>Subscriptions:</h2>\n                {Object.keys(subscriptions).map(key => (\n                  <Order key={key} sub={subscriptions[key]} />\n                ))}\n              </div>\n              <div className=\"tr_item orders\">\n                <h2>Orders:</h2>\n                {Object.keys(orders).map(key => (\n                  <Order key={key} sub={orders[key]} />\n                ))}\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.socket.loading,\n    authorized: state.socket.authorized,\n    instruments: state.market.instruments,\n    orders: state.market.orders,\n    subscriptions: state.market.subscriptions\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    initWebSocket: url => dispatch(initSocket(url)),\n    fetchInstruments: (broker, account) =>\n      dispatch(fetchInstruments(broker, account)),\n    setInstrument: sym => dispatch(setInstrument(sym))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n","export function stringToHash(str) {\n  var hash = 5381,\n    i = str.length;\n\n  while (i) {\n    hash = (hash * 33) ^ str.charCodeAt(--i);\n  }\n\n  return hash >>> 0;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionTypes from \"../actions/actionTypes\";\n\nconst initialState = {\n  authorized: false,\n  loading: false,\n  socket: null,\n  error: null\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.SOCKET_CONNECT_START: {\n      return {\n        ...state,\n        loading: true\n      };\n    }\n    case actionTypes.SOCKET_CONNECT_SUCCESS: {\n      return {\n        ...state,\n        loading: false,\n        authorized: true,\n        socket: action.socket\n      };\n    }\n    case actionTypes.SOCKET_CONNECT_ERROR: {\n      return {\n        ...state,\n        loading: false,\n        error: action.error\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n};\n","import * as actionTypes from \"../actions/actionTypes\";\n\nconst initialState = {\n  loading: false,\n  instruments: [],\n  orders: {},\n  subscriptions: {}\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.SET_SUBSCRIPTIONS: {\n      return {\n        ...state,\n        subscriptions: action.subscriptions\n      };\n    }\n    case actionTypes.FETCH_INSTRUMENTS_START: {\n      return {\n        ...state,\n        loading: true\n      };\n    }\n    case actionTypes.FETCH_INSTRUMENTS_SUCCESS: {\n      return {\n        ...state,\n        instruments: action.instruments,\n        loading: false\n      };\n    }\n    case actionTypes.SET_ORDERS: {\n      return {\n        ...state,\n        orders: action.orders\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n};\n","import { combineReducers } from \"redux\";\nimport socket from \"./socket\";\nimport market from \"./market\";\n\nexport default combineReducers({\n  socket,\n  market\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./store/reducers/index\";\nimport { Provider } from \"react-redux\";\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(thunk))\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}