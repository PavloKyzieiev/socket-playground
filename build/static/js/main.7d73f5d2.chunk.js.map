{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","storageUrl","localStorage","getItem","userId","broker","account","authorized","loading","socket","consoleData","protoQuotes","instruments","consoleContainer","React","createRef","handleInputChange","event","key","value","target","setItem","_this","setState","Object","defineProperty","handleConnectButtonClick","_this$state","activeInstrument","close","WebSocket","split","binaryType","e","message","initWebSocket","onopen","prevState","objectSpread","concat","toConsumableArray","request","JSON","stringify","user","onclose","reason","wasClean","order","onmessage","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","data","_this$state2","bytearray","type","wrap","_context","prev","next","Uint8Array","decode","parse","t0","abrupt","stop","this","_x","apply","arguments","onerror","error","body","send","subscribe","_ref2","sym","_this$state3","sub","rec","brk","acc","unsubscribe","_this$state4","getInstruments","_this$state5","clearConsole","prevProps","current","scrollTop","scrollHeight","_this2","protobuf","load","then","root","lookupType","_this3","_this$state6","button","react_default","createElement","onClick","className","onChange","map","el","i","length","Fragment","ref","index","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7d73f5d2.chunk.js","sourcesContent":["import React from \"react\";\n\nimport protobuf from \"protobufjs\";\n\nclass App extends React.Component {\n  state = {\n    storageUrl: localStorage.getItem(\"storageUrl\") || \"\",\n    userId: localStorage.getItem(\"userId\") || \"\",\n    broker: localStorage.getItem(\"broker\") || \"\",\n    account: localStorage.getItem(\"account\") || \"\",\n    authorized: false,\n    loading: false,\n    socket: null,\n    consoleData: [],\n    protoQuotes: null,\n    instruments: [],\n    consoleContainer: React.createRef()\n  };\n\n  handleInputChange = (event, key) => {\n    const { value } = event.target;\n    localStorage.setItem(key, value);\n    this.setState({ [key]: value });\n  };\n\n  handleConnectButtonClick = () => {\n    const { authorized, storageUrl, userId } = this.state;\n    let { socket } = this.state;\n    if (!authorized) {\n      try {\n        socket = new WebSocket(storageUrl.split(\"?\")[0] + \"?user=\" + userId);\n        socket.binaryType = \"arraybuffer\";\n      } catch (e) {\n        return this.setState({ consoleData: [e.message] });\n      }\n\n      this.setState({ socket, loading: true });\n    } else if (socket && authorized) {\n      this.setState({ instruments: [], activeInstrument: null });\n      socket.close();\n    }\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    const { consoleContainer } = this.state;\n\n    if (consoleContainer.current) {\n      consoleContainer.current.scrollTop =\n        consoleContainer.current.scrollHeight;\n    }\n\n    if (!prevState.socket && this.state.socket) {\n      this.initWebSocket();\n    }\n  }\n\n  componentDidMount() {\n    protobuf.load(\"proto/awesome.proto\").then(root => {\n      var protoQuotes = root.lookupType(\"protobuf.quotes.Quote\");\n\n      this.setState(prevState => ({\n        ...prevState,\n        protoQuotes\n      }));\n    });\n  }\n\n  initWebSocket = () => {\n    let { socket } = this.state;\n\n    socket.onopen = () => {\n      this.setState(prevState => ({\n        ...prevState,\n        consoleData: [...prevState.consoleData, \"Соединение установлено.\"]\n      }));\n\n      this.request(JSON.stringify({ user: { userId: 666 } }));\n    };\n\n    socket.onclose = event => {\n      let reason = \"\";\n\n      if (event.wasClean) {\n        reason = \"Соединение закрыто\";\n      } else {\n        reason = \"Обрыв соединения\";\n      }\n\n      this.setState(prevState => ({\n        ...prevState,\n        consoleData: [...prevState.consoleData, reason],\n        authorized: false,\n        socket: null,\n        loading: false,\n        order: null\n      }));\n    };\n\n    socket.onmessage = async message => {\n      let data;\n\n      let { authorized, protoQuotes, instruments } = this.state;\n\n      if (typeof message.data !== \"string\") {\n        var bytearray = new Uint8Array(message.data);\n        data = protoQuotes.decode(bytearray);\n      } else {\n        data = JSON.parse(message.data);\n      }\n\n      const { type } = data;\n\n      switch (type) {\n        case 0: {\n          authorized = true;\n          break;\n        }\n        case 1: {\n          authorized = false;\n          break;\n        }\n        case 7: {\n          instruments = data.instruments;\n          break;\n        }\n        default: {\n          break;\n        }\n      }\n\n      if (!authorized) socket = null;\n\n      this.setState(prevState => ({\n        ...prevState,\n        consoleData: [...prevState.consoleData, JSON.stringify(data)],\n        authorized,\n        loading: false,\n        socket,\n        instruments\n      }));\n    };\n\n    socket.onerror = error => {\n      this.setState(prevState => ({\n        ...prevState,\n        consoleData: [...prevState.consoleData, \"Ошибка \" + error.message],\n        authorized: false,\n        socket: null,\n        loading: false\n      }));\n    };\n  };\n\n  request = body => {\n    const { socket } = this.state;\n    socket.send(body);\n\n    this.setState(prevState => ({\n      ...prevState,\n      consoleData: [...prevState.consoleData, \"request ->   \" + body]\n    }));\n  };\n\n  subscribe = ({ sym }) => {\n    const { broker, account } = this.state;\n\n    this.request(\n      JSON.stringify({\n        type: 1,\n        sub: [{ rec: { brk: broker, acc: account }, sym: [sym] }]\n      })\n    );\n  };\n\n  unsubscribe = () => {\n    const { broker, account } = this.state;\n    this.request(\n      JSON.stringify({\n        type: 1,\n        sub: [{ rec: { brk: broker, acc: account }, sym: [] }]\n      })\n    );\n  };\n\n  getInstruments = () => {\n    const { broker, account, socket } = this.state;\n    socket.send(\n      JSON.stringify({ type: 2, rec: { brk: broker, acc: account } })\n    );\n  };\n\n  clearConsole = () => {\n    this.setState({ consoleData: [] });\n  };\n\n  render() {\n    var { authorized, consoleData, loading, instruments } = this.state;\n    const button = loading ? (\n      <span>Loading</span>\n    ) : (\n      <button type=\"button\" onClick={this.handleConnectButtonClick}>\n        {authorized ? \"Disconnect\" : \"Connect\"}\n      </button>\n    );\n    return (\n      <div>\n        <div className=\"control\">\n          <div>\n            <div className=\"form-group\">\n              <label>Ендпоинт (ws[s]://...)</label>\n              <input\n                value={this.state.storageUrl}\n                onChange={e => this.handleInputChange(e, \"storageUrl\")}\n              />\n            </div>\n            <div className=\"form-group\">\n              <label>Юзер</label>\n              <input\n                value={this.state.userId}\n                onChange={e => this.handleInputChange(e, \"userId\")}\n              />\n            </div>\n          </div>\n          {authorized && (\n            <div>\n              <div className=\"form-group\">\n                <label>Брокер</label>\n                <input\n                  value={this.state.broker}\n                  onChange={e => this.handleInputChange(e, \"broker\")}\n                />\n              </div>\n              <div className=\"form-group\">\n                <label>Аккаунт</label>\n                <input\n                  value={this.state.account}\n                  onChange={e => this.handleInputChange(e, \"account\")}\n                />\n              </div>\n            </div>\n          )}\n\n          {button}\n        </div>\n\n        {authorized && (\n          <div>\n            <button onClick={this.getInstruments}>Get Instruments</button>\n            <button onClick={this.unsubscribe}>Unsubscribe</button>\n          </div>\n        )}\n\n        {instruments.map((el, i) => (\n          <button key={i} onClick={() => this.subscribe({ sym: el.sym })}>\n            {el.sym}\n          </button>\n        ))}\n\n        <hr />\n\n        {consoleData.length ? (\n          <>\n            <button onClick={this.clearConsole}>Clear</button>\n            <div className=\"console-wrap\" ref={this.state.consoleContainer}>\n              {consoleData.map((el, index) => (\n                <p className=\"console\" key={index}>\n                  {el}\n                </p>\n              ))}\n            </div>\n          </>\n        ) : null}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}